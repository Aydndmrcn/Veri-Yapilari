class LinkedList:
  """A base class providing a doubly linked list representation."""

  #-------------------------- nested _Node class --------------------------
  # nested _Node class
  class _Node:
    """Lightweight, nonpublic class for storing a doubly linked node."""
    def __init__(self, e, e1, prev, next):                  # initialize node's fields
      self._element = e                                 # polinomun derecesi
      self._element1 = e1                               # polinomun katsayısı
      self._prev = prev                                 # previous node reference
      self._next = next                                 # next node reference

  #-------------------------- list constructor --------------------------

  def __init__(self):
    """Create an empty list."""
    self._head = None
    self._tail = None
    self._size = 0                                      # number of elements

  #-------------------------- public accessors --------------------------

  def __len__(self):
    """Return the number of elements in the list."""
    return self._size

  def is_empty(self):
    """Return True if list is empty."""
    return self._size == 0


  def add_first(self,e, e1):
    newest = self._Node(e,e1,None,self._head)
    if self._size == 0:       # liste boş ise
       self._head = newest
       self._tail = newest
    else:                     # dolu listenin başına eleman ekle
        self._head._prev = newest
        self._head = newest
    self._size += 1

  def add_last(self, e, e1):
    newest = self._Node(e, e1, self._tail, None)
    self._tail._next = newest
    self._tail = newest
    self._size += 1

  def insert(self, e, e1):
    prev=None # daha önceden listedeki o index'in dolu olup olmamasını kontrol etmek için oluşturulmuştur.
    if self._head == None or e < self._head._element:          # if list is empty
      self.add_first(e, e1)
    elif e > self._tail._element:   # add last
      self.add_last(e, e1)
    else:                           # insert between
      cur = self._head
      while cur._next != None and e >= cur._element :
        if e == cur._element: # eğer aynı indexte eleman varsa
          cur._element1 = cur._element1+"+"+ e1 # aynı index'teki elemanların katsayıları toplanması içindir.
          prev=0 # daha önceden aynı index var ise prev not None yapılır.
        cur = cur._next
      if prev is None: # daha önceden aynı index yok ise prev zaten None olarak kalıcaktır. Ve yeni Node eklenicektir.
        newest = self._Node(e, e1, cur._prev, cur)
        cur._prev._next = newest
        cur._prev = newest
        self._size += 1



  def print_list(self):
    cur = self._head
    elements = []
    while cur != None:
      print("(",cur._element1,"*x^",cur._element,")" ,end="+")
      cur = cur._next
    print("")

  def get_list(self): ### Listedeki bilgileri almak için kullanılır. ####
    cur = self._head
    elements = [] # boş liste oluşturulur.
    while cur != None:
      elements.append([cur._element, cur._element1]) # boş listeyi dışarıdan gelen bilgilerle doldurmak için kullanılır.
      cur = cur._next
    return elements  # alınana bilgiler döndürülür.

def _sum_two_list(l1,l2): ### iki farklı listeyi birleştirmek için kullanılır. ####
    l1l2_sum = LinkedList() # yeni bir boş LinkList() oluşturulur.
    l1_elements = l1.get_list() # toplanılması istenen ilk liste
    l2_elements = l2.get_list() # toplanılması istenen ikinci liste
    for data in l1_elements: # ilk listedeki verileri eklemek için kullanılır.
      l1l2_sum.insert(data[0], data[1])
    for data1 in l2_elements: # ikinci listedeki verileri eklemek için kullanılır.
      l1l2_sum.insert(data1[0], data1[1])
    return l1l2_sum




def main():
    h1 = LinkedList()
    h2 = LinkedList()
    h2.insert(0,"w2_01")
    h2.insert(55, "w_55")
    h2.insert(1002, "w_1002")
    h1.insert(0,"w1_0")
    h1.insert(23,"w_23")
    h1.insert(46,"w_46")
    h1.insert(1001,"w_1001")

    h1h2_toplam = _sum_two_list(h1,h2)
    print("p1 = ", end="")
    h1.print_list()
    print("p2 = ",end="")
    h2.print_list()
    print("p1 + p2 = ",end="")
    h1h2_toplam.print_list()

if __name__ == "__main__":
    main()
